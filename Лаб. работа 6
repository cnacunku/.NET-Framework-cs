using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NETFramework_cs_6
{
    internal class NETFramework_cs_6
    {
        static void Main()
        {
            int choice;
        startMenu:
            try
            {
                do
                {
                    Console.WriteLine("\nВыберите действие (1-2) или 0 для выхода:");
                    Console.WriteLine("1. Задание 1 - Работа с коллекцией целых чисел (List<int>)");
                    Console.WriteLine("2. Задание 2 - Работа с коллекцией пассажирских самолётов (List<PassengerPlane>)");
                    Console.WriteLine("0. Выход");
                    Console.Write("Выберите действие: ");

                    choice = Convert.ToInt32(Console.ReadLine());

                    switch (choice)
                    {
                        case 1:
                            First();
                            break;
                        case 2:
                            Second();
                            break;
                        case 0:
                            Console.WriteLine("Выход из программы");
                            break;
                        default:
                            Console.WriteLine("Несуществующее действие, попробуйте снова");
                            break;
                    }
                } while (choice != 0);
            }
            catch
            {
                Console.WriteLine("Ошибка. Введите целое число!");
                goto startMenu;
            }
        }

        // Первое
        static void First()
        {
            List<int> numbers = new List<int>();
            int choice;
        Fmenu:
            try
            {
                do
                {
                    Console.WriteLine("\n=== Меню управления коллекцией целых чисел ===");
                    Console.WriteLine("1. Добавить число(а)");
                    Console.WriteLine("2. Удалить число(а)");
                    Console.WriteLine("3. Найти число");
                    Console.WriteLine("4. Отсортировать коллекцию");
                    Console.WriteLine("5. Вывести коллекцию");
                    Console.WriteLine("0. Назад в главное меню");
                    Console.Write("Выберите действие: ");
                    choice = Convert.ToInt32(Console.ReadLine());
                    switch (choice)
                    {
                        case 1:
                            AddNum(numbers);
                            break;
                        case 2:
                            DelNum(numbers);
                            break;
                        case 3:
                            SearchNum(numbers);
                            break;
                        case 4:
                            SortNum(numbers);
                            break;
                        case 5:
                            ShowNum(numbers);
                            break;
                        case 0:
                            Console.WriteLine("Возврат в главное меню ->");
                            break;
                        default:
                            Console.WriteLine("Несуществующее действие, попробуйте снова");
                            break;
                    }
                } while (choice != 0);
            }
            catch
            {
                Console.WriteLine("Ошибка. Введите целое число");
                goto Fmenu;
            }
        }

        static void AddNum(List<int> numbers)
        {
            Console.Write("Введите числа через пробел: ");
            string input = Console.ReadLine();

            if (string.IsNullOrWhiteSpace(input))
            {
                Console.WriteLine("Пустой ввод");
                return;
            }

            string[] numberStrings = input.Split(' ');
            List<int> addedNumbers = new List<int>();
            List<string> invalidInputs = new List<string>();
            List<int> duplicateNumbers = new List<int>();

            foreach (string numberStr in numberStrings)
            {
                if (string.IsNullOrWhiteSpace(numberStr))
                    continue;

                if (int.TryParse(numberStr, out int num))
                {
                    if (numbers.Contains(num))
                    {
                        duplicateNumbers.Add(num);
                    }
                    else
                    {
                        numbers.Add(num);
                        addedNumbers.Add(num);
                    }
                }
                else
                {
                    invalidInputs.Add(numberStr);
                }
            }

            if (addedNumbers.Count > 0)
            {
                string numbersText = string.Join(", ", addedNumbers);
                Console.WriteLine($"Числа {numbersText} добавлены в коллекцию");
            }

            if (duplicateNumbers.Count > 0)
            {
                string duplicateText = string.Join(", ", duplicateNumbers);
                Console.WriteLine($"Числа {duplicateText} уже есть в коллекции - пропускаем");
            }

            if (invalidInputs.Count > 0)
            {
                string invalidText = string.Join(", ", invalidInputs);
                Console.WriteLine($"Некорректный ввод: {invalidText} - пропускаем");
            }

            if (addedNumbers.Count == 0 && duplicateNumbers.Count == 0 && invalidInputs.Count == 0)
            {
                Console.WriteLine("Не удалось добавить ни одного числа");
            }
        }

        static void DelNum(List<int> numbers)
        {
            Console.Write("Введите числа для удаления через пробел: ");
            string input = Console.ReadLine();

            if (string.IsNullOrWhiteSpace(input))
            {
                Console.WriteLine("Пустой ввод");
            }

            string[] numberStrings = input.Split(' ');
            List<int> removedNumbers = new List<int>();
            List<int> notFoundNumbers = new List<int>();
            List<string> invalidInputs = new List<string>();

            foreach (string numberStr in numberStrings)
            {
                if (string.IsNullOrWhiteSpace(numberStr))
                    continue;

                if (int.TryParse(numberStr, out int num))
                {
                    if (numbers.Remove(num))
                        removedNumbers.Add(num);
                else
                    notFoundNumbers.Add(num);
                }
                else
                {
                    invalidInputs.Add(numberStr);
                }
            }

            if (removedNumbers.Count > 0)
            {
                string removedText = string.Join(", ", removedNumbers);
                Console.WriteLine($"Числа {removedText} удалены из коллекции");
            }

            if (notFoundNumbers.Count > 0)
            {
                string notFoundText = string.Join(", ", notFoundNumbers);
                Console.WriteLine($"Числа {notFoundText} не найдены в коллекции");
            }

            if (invalidInputs.Count > 0)
            {
                string invalidText = string.Join(", ", invalidInputs);
                Console.WriteLine($"Некорректный ввод: {invalidText} - пропускаем");
            }

            if (removedNumbers.Count == 0 && notFoundNumbers.Count == 0 && invalidInputs.Count > 0)
            {
                Console.WriteLine("Не удалось обработать ни одного числа");
            }
        }

        static void SearchNum(List<int> numbers)
        {
            int num;
        F3:
            Console.Write("Введите число для поиска: ");
            if (int.TryParse(Console.ReadLine(), out num))
            {
                if (numbers.Contains(num))
                    Console.WriteLine($"Число {num} найдено в коллекции");
                else
                    Console.WriteLine("Число не найдено");
            }
            else
            {
                Console.WriteLine("Некорректный ввод, попробуйте снова");
                goto F3;
            }
        }

        static void SortNum(List<int> numbers)
        {
            numbers.Sort();
            Console.WriteLine("Коллекция отсортирована(в порядке увеличения)");
        }

        static void ShowNum(List<int> numbers)
        {
            if (numbers.Count == 0)
                Console.WriteLine("Коллекция пуста");
            else
                Console.WriteLine("Коллекция целых чисел: " + string.Join(", ", numbers));
        }

        // Второе
        static void Second()
        {
            List<PassengerPlane> planes = new List<PassengerPlane>();
            int choice;
        Smenu:
            try
            {
                do
                {
                    Console.WriteLine("\n=== Меню управления коллекцией самолётов ===");
                    Console.WriteLine("1. Добавить самолёт");
                    Console.WriteLine("2. Удалить самолёт по модели");
                    Console.WriteLine("3. Найти самолёт по авиакомпании");
                    Console.WriteLine("4. Отсортировать по году выпуска");
                    Console.WriteLine("5. Вывести все самолёты");
                    Console.WriteLine("0. Назад в главное меню");
                    Console.Write("Выберите действие: ");
                    choice = Convert.ToInt32(Console.ReadLine());

                    switch (choice)
                    {
                        case 1: 
                            AddPlane(planes);
                            break;
                        case 2:
                            DelPlane(planes);
                            break;
                        case 3:
                            SearchPlane(planes); 
                            break;
                        case 4: 
                            SortPlanes(planes); 
                            break;
                        case 5:
                            ShowPlanes(planes); 
                            break;
                        case 0:
                            Console.WriteLine("Возврат в главное меню ->"); 
                            break;
                        default:
                            Console.WriteLine("Несуществующее действие");
                            break;
                    }
                } while (choice != 0);
            }
            catch
            {
                Console.WriteLine("Ошибка. Введите целое число");
                goto Smenu;
            }
        }

        static void AddPlane(List<PassengerPlane> planes)
        {
            Console.Write("Введите авиакомпанию: ");
            string airline = Console.ReadLine();

            Console.Write("Введите модель самолёта: ");
            string model = Console.ReadLine();

            int year;
            do
            {
                Console.Write("Введите год выпуска: ");
                if (!int.TryParse(Console.ReadLine(), out year) || year < 0)
                {
                    Console.WriteLine("Год выпуска не может быть отрицательным, попробуйте снова");
                }
            } while (year < 0);

            int seats;
            do
            {
                Console.Write("Введите количество мест: ");
                if (!int.TryParse(Console.ReadLine(), out seats) || seats < 0)
                {
                    Console.WriteLine("Количество мест не может быть отрицательным, попробуйте снова");
                }
            } while (seats < 0);

            planes.Add(new PassengerPlane(airline, model, year, seats));
            Console.WriteLine("Самолёт успешно добавлен");
        }

        static void DelPlane(List<PassengerPlane> planes)
        {
            Console.Write("Введите модель самолёта для удаления: ");
            string model = Console.ReadLine();

            var removed = planes.RemoveAll(p => p.Model.Equals(model, StringComparison.OrdinalIgnoreCase));
            if (removed > 0)
                Console.WriteLine($"Удалено самолётов: {removed}");
            else
                Console.WriteLine("Самолёты с такой моделью не найдены");
        }

        static void SearchPlane(List<PassengerPlane> planes)
        {
            Console.Write("Введите авиакомпанию для поиска: ");
            string airline = Console.ReadLine();

            var found = planes.FindAll(p => p.AirlineName.Equals(airline, StringComparison.OrdinalIgnoreCase));
            if (found.Count == 0)
                Console.WriteLine("Самолёты не найдены");
            else
            {
                Console.WriteLine($"Найдено {found.Count} самолётов:");
                foreach (var p in found)
                {
                    Console.WriteLine("-----------");
                    p.ShowInfo();
                }
            }
        }

        static void SortPlanes(List<PassengerPlane> planes)
        {
            if (planes.Count == 0)
            {
                Console.WriteLine("Коллекция пуста");
                return;
            }

            Console.WriteLine("\nВыберите способ сортировки:");
            Console.WriteLine("1. По количеству мест");
            Console.WriteLine("2. По году выпуска");
            Console.Write("Ваш выбор: ");

            string input = Console.ReadLine();

            switch (input)
            {
                case "1":
                    planes.Sort((a, b) => a.Seats.CompareTo(b.Seats));
                    Console.WriteLine("Коллекция отсортирована по количеству мест");
                    break;

                case "2":
                    planes.Sort((a, b) => a.Year.CompareTo(b.Year));
                    Console.WriteLine("Коллекция отсортирована по году выпуска");
                    break;

                default:
                    Console.WriteLine("Некорректный выбор, сортировка не выполнена");
                    break;
            }
        }

        static void ShowPlanes(List<PassengerPlane> planes)
        {
            if (planes.Count == 0)
            {
                Console.WriteLine("Коллекция пуста");
                return;
            }

            Console.WriteLine("\n=== Список пассажирских самолётов ===");
            GORline(62);
            Console.WriteLine("| {0,-20} | {1,-20} | {2,-6} | {3,-5} |", "Авиакомпания", "Модель", "Год", "Мест");
            GORline(62);
            foreach (var p in planes)
            {
                Console.WriteLine("| {0,-20} | {1,-20} | {2,-6} | {3,-5} |",
                                  p.AirlineName, p.Model, p.Year, p.Seats);
            }
            GORline(62);
        }

        static void GORline(int f_size)
        {
            Console.Write("x");
            for (int i = 0; i < f_size; i++)
            {
                Console.Write("-");
            }
            Console.Write("x\n");
        }

    }


    public class PassengerPlane
    {
        private string _airlineName; // Авиакомпания
        private string _model;       // Модель самолёта
        private int _year;           // Год выпуска
        private int _seats;          // Количество мест

        public string AirlineName
        {
            get { return _airlineName; }
            set { _airlineName = value; }
        }

        public string Model
        {
            get { return _model; }
            set { _model = value; }
        }

        public int Year
        {
            get { return _year; }
            set
            {
                if (value < 1900 || value > DateTime.Now.Year)
                    Console.WriteLine("Некорректный год выпуска!");
                else
                    _year = value;
            }
        }

        public int Seats
        {
            get { return _seats; }
            set
            {
                if (value < 1)
                    Console.WriteLine("Количество мест не может быть меньше 1!");
                else
                    _seats = value;
            }
        }

        public PassengerPlane(string airlineName, string model, int year, int seats)
        {
            AirlineName = airlineName;
            Model = model;
            Year = year;
            Seats = seats;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Авиакомпания: {AirlineName}");
            Console.WriteLine($"Модель: {Model}");
            Console.WriteLine($"Год выпуска: {Year}");
            Console.WriteLine($"Количество мест: {Seats}");
        }
    }
}
